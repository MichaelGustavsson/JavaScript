{"version":3,"file":"index-80dc7cae7c1f72bdb395.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;ACAmC;;AAE5B;AACP,kBAAkB,4CAAK;AACvB,kBAAkB,4CAAK;;AAEvB;AACA;AACA,8BAA8B,QAAQ,EAAE,SAAS,SAAS,SAAS,WAAW,QAAQ,uBAAuB,KAAK;AAClH,IAAI;AACJ,8BAA8B,QAAQ,EAAE,SAAS,WAAW,QAAQ,uBAAuB,KAAK;AAChG;;AAEA;AACA;AACA;;;;;;;;;;;;;;;ACfO;AACP;AACA;AACA;AACA,GAAG;AACH;;;;;;;UCLA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN6C;AACX;;AAElC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,0DAAS;AAC5B,IAAI;AACJ,mBAAmB,0DAAS;AAC5B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,SAAS;AACjD,UAAU,gEAAgE,kBAAkB,SAAS,YAAY,2DAA2D,YAAY;AACxL;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA,qDAAqD,mBAAmB;AACxE;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,0DAAS;;AAEhC;AACA;AACA;;AAEA","sources":["webpack://movieflix/./src/assets/scss/main.scss?bd8c","webpack://movieflix/./src/app/utils/https.js","webpack://movieflix/./src/app/utils/state.js","webpack://movieflix/webpack/bootstrap","webpack://movieflix/webpack/runtime/define property getters","webpack://movieflix/webpack/runtime/hasOwnProperty shorthand","webpack://movieflix/webpack/runtime/make namespace object","webpack://movieflix/./src/app/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","import { state } from './state.js';\n\nexport const fetchData = async (endpoint, page = 1, criteria = undefined) => {\n  const API_KEY = state.api.key;\n  const API_URL = state.api.baseUrl;\n\n  let response;\n  if (criteria) {\n    response = await fetch(`${API_URL}${endpoint}?query=${criteria}&api_key=${API_KEY}&language=sv-SE&page=${page}`);\n  } else {\n    response = await fetch(`${API_URL}${endpoint}?api_key=${API_KEY}&language=sv-SE&page=${page}`);\n  }\n\n  const data = await response.json();\n  return data;\n};\n","export const state = {\n  api: {\n    key: 'cfd8ad8f2d19b724a21ca2510b450da9',\n    baseUrl: 'https://api.themoviedb.org/3/',\n  },\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { fetchData } from './utils/https.js';\nimport '../assets/scss/main.scss';\n\nconst pageNumber = document.querySelector('#pageNo');\nconst pages = document.querySelector('#pages');\nlet criteria = '';\n\ndocument.querySelector('#gotoFirst').addEventListener('click', onGotoFirstPageHandler);\ndocument.querySelector('#gotoPrevious').addEventListener('click', onGotoPrevHandler);\ndocument.querySelector('#gotoNext').addEventListener('click', onGotoNextPageHandler);\ndocument.querySelector('#gotoLast').addEventListener('click', onGotoLastPageHandler);\ndocument.querySelector('#searchForm').addEventListener('submit', onSearch);\n\nlet result;\n\nconst listPopularMovies = async (page = 1) => {\n  if (criteria && criteria.length > 0) {\n    result = await fetchData('search/movie', page, criteria);\n  } else {\n    result = await fetchData('movie/popular', page);\n  }\n\n  displayMovies(result.results);\n  displayPagination(result);\n};\n\nconst displayPagination = (data) => {\n  const pages = data.total_pages > 500 ? 500 : data.total_pages;\n  const currentPage = document.querySelector('#pageNo');\n  const numOfPages = document.querySelector('#pages');\n  currentPage.innerHTML = data.page;\n  numOfPages.innerHTML = pages;\n};\n\nfunction onGotoFirstPageHandler() {\n  listPopularMovies(1);\n}\n\nfunction onGotoPrevHandler() {\n  let page = +pageNumber.innerHTML;\n  page > 1 ? page-- : 1;\n  listPopularMovies(page);\n}\n\nfunction onGotoNextPageHandler() {\n  const numOfPages = +pages.innerHTML;\n  let page = +pageNumber.innerHTML;\n  page < numOfPages ? page++ : 500;\n  listPopularMovies(page);\n}\n\nfunction onGotoLastPageHandler() {\n  listPopularMovies(+pages.innerHTML);\n}\n\nfunction displayMovies(movies) {\n  document.querySelector('#top-movies').innerHTML = '';\n  movies.forEach((movie) => {\n    const div = document.createElement('div');\n    div.classList.add('card');\n\n    div.innerHTML = `\n      <a href=\"/movie-details.html?id=${movie.id}\">\n        ${movie.poster_path ? `<img src=\"https://image.tmdb.org/t/p/w500${movie.poster_path}\" alt=\"${movie.title}\"/>` : `<img src=\"./src/assets/images/No-Image.jpg\" alt=\"${movie.title}\" />`}\n      </a>\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">${movie.title}</h5>\n        <p class=\"card-text\">\n          <small class=\"text-muted\">Premi√§r datum: ${movie.release_date}</small>\n        </p>\n      </div>\n    `;\n\n    document.querySelector('#top-movies').appendChild(div);\n  });\n}\n\nasync function onSearch(e) {\n  e.preventDefault();\n\n  let page = 1;\n  criteria = document.querySelector('#searchInput').value;\n\n  if (criteria === '') {\n    listPopularMovies();\n    return;\n  }\n\n  const result = await fetchData('search/movie', page, criteria);\n\n  displayPagination(result);\n  displayMovies(result.results);\n}\n\nlistPopularMovies();\n"],"names":[],"sourceRoot":""}